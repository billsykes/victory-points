name: Update Fantasy Football Standings

on:
  schedule:
    # Run every Tuesday at 8 AM EST (after Yahoo processes weekend games)
    - cron: '0 13 * * 2'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      week:
        description: 'Specific week to process (leave empty for current week)'
        required: false
        type: string
      all_weeks:
        description: 'Process all available weeks'
        required: false
        type: boolean
        default: false

jobs:
  update-standings:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Disable IPv6 to prevent connection issues
      run: sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Configure pip for better reliability
        pip config set global.timeout 60
        pip config set global.retries 5
        pip config set global.disable-pip-version-check true
        
        # Function to try installation with different methods
        install_requirements() {
          local method="$1"
          local cmd="$2"
          echo "=== Trying installation method: $method ==="
          if eval "$cmd"; then
            echo "✅ Installation successful with $method"
            return 0
          else
            echo "❌ Installation failed with $method"
            return 1
          fi
        }
        
        # Try different installation methods in order
        install_requirements "primary PyPI" "pip install --verbose --retries 5 --timeout 60 -r requirements.txt" || \
        install_requirements "trusted hosts" "pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org --retries 5 --timeout 60 -r requirements.txt" || \
        install_requirements "alternative mirror" "pip install --index-url https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn --retries 5 --timeout 60 -r requirements.txt" || \
        {
          echo "❌ All standard methods failed, trying individual package installation..."
          # Install essential packages individually
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org setuptools wheel
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org numpy==1.26.4
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org pandas==2.1.4
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org requests==2.31.0
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org python-dateutil==2.8.2
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org python-dotenv==1.0.1
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org colorlog==6.8.2
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org "yfpy>=16.0.0,<17.0.0"
        }
    
    - name: Verify installation
      run: |
        echo "=== Verifying installed packages ==="
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import yfpy; print(f'yfpy version: {yfpy.__version__}')"
        python -c "import pandas; print(f'pandas version: {pandas.__version__}')"
        python -c "import requests; print(f'requests version: {requests.__version__}')"
        echo "✅ All required packages are properly installed"
    
    - name: Create auth directory
      run: mkdir -p config/auth
    
    - name: Fetch data and update standings
      env:
        YAHOO_CONSUMER_KEY: ${{ secrets.YAHOO_CONSUMER_KEY }}
        YAHOO_CONSUMER_SECRET: ${{ secrets.YAHOO_CONSUMER_SECRET }}
        LEAGUE_ID: ${{ secrets.LEAGUE_ID }}
        GAME_KEY: nfl
        CURRENT_SEASON: 2024
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/scripts
      run: |
        # Verify we're in the right directory and show Python path
        echo "Current directory: $(pwd)"
        echo "Python path: $PYTHONPATH"
        echo "Files in scripts/:"
        ls -la scripts/
        
        # Test Python imports before running
        echo "Testing Python imports..."
        cd scripts
        python -c "import sys; print('Python sys.path:', sys.path)"
        python -c "import yfpy; print('yfpy imported successfully')"
        python -c "import yahoo_client; print('yahoo_client imported successfully')"
        cd ..
        
        # Run the script with proper path
        if [ "${{ github.event.inputs.all_weeks }}" = "true" ]; then
          cd scripts && python fetch_data.py --all-weeks
        elif [ -n "${{ github.event.inputs.week }}" ]; then
          cd scripts && python fetch_data.py --week ${{ github.event.inputs.week }}
        else
          cd scripts && python fetch_data.py
        fi
    
    - name: Check for changes
      id: git-check
      run: |
        git add data/
        if git diff --staged --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.git-check.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/
        git commit -m "🏈 Update fantasy football standings - $(date '+%Y-%m-%d %H:%M')"
        git push
    
    - name: Deploy to GitHub Pages
      if: steps.git-check.outputs.changes == 'true'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./website
        publish_branch: gh-pages
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: '🏈 Update standings website - ${{ github.sha }}'
    
    - name: Create summary
      if: always()
      run: |
        echo "## Fantasy Football Standings Update" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.git-check.outputs.changes }}" = "true" ]; then
          echo "✅ **Standings updated successfully**" >> $GITHUB_STEP_SUMMARY
          echo "- New data fetched from Yahoo Fantasy API" >> $GITHUB_STEP_SUMMARY
          echo "- Standings recalculated with Victory Points system" >> $GITHUB_STEP_SUMMARY
          echo "- Website deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **No changes detected**" >> $GITHUB_STEP_SUMMARY
          echo "- No new data available from Yahoo Fantasy API" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next scheduled update:** Tuesday at 8 AM EST" >> $GITHUB_STEP_SUMMARY
