name: Update Fantasy Football Standings

on:
  schedule:
    # Run every Tuesday at 8 AM EST (after Yahoo processes weekend games)
    - cron: '0 13 * * 2'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      week:
        description: 'Specific week to process (leave empty for current week)'
        required: false
        type: string
      all_weeks:
        description: 'Process all available weeks'
        required: false
        type: boolean
        default: false

jobs:
  update-standings:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow pushing changes to repository
      pages: write     # Allow deploying to GitHub Pages
      id-token: write  # Allow OIDC token for Pages deployment
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Disable IPv6 to prevent connection issues
      run: sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Configure pip for better reliability
        pip config set global.timeout 60
        pip config set global.retries 5
        pip config set global.disable-pip-version-check true
        
        # Function to try installation with different methods
        install_requirements() {
          local method="$1"
          local cmd="$2"
          echo "=== Trying installation method: $method ==="
          if eval "$cmd"; then
            echo "‚úÖ Installation successful with $method"
            return 0
          else
            echo "‚ùå Installation failed with $method"
            return 1
          fi
        }
        
        # Try different installation methods in order
        install_requirements "primary PyPI" "pip install --verbose --retries 5 --timeout 60 -r requirements.txt" || \
        install_requirements "trusted hosts" "pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org --retries 5 --timeout 60 -r requirements.txt" || \
        install_requirements "alternative mirror" "pip install --index-url https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn --retries 5 --timeout 60 -r requirements.txt" || \
        {
          echo "‚ùå All standard methods failed, trying individual package installation..."
          # Install essential packages individually
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org setuptools wheel
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org numpy==1.26.4
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org pandas==2.1.4
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org requests==2.31.0
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org python-dateutil==2.8.2
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org python-dotenv==1.0.1
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org colorlog==6.8.2
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org "yfpy>=16.0.0,<17.0.0"
        }
    
    - name: Verify installation
      run: |
        echo "=== Verifying installed packages ==="
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import yfpy; print('‚úÖ yfpy imported successfully')"
        python -c "from yfpy import YahooFantasySportsQuery; print('‚úÖ YahooFantasySportsQuery imported successfully')"
        python -c "import pandas; print(f'pandas version: {pandas.__version__}')"
        python -c "import requests; print(f'requests version: {requests.__version__}')"
        python -c "import numpy; print(f'numpy version: {numpy.__version__}')"
        python -c "import dotenv; print('‚úÖ python-dotenv imported successfully')"
        python -c "import colorlog; print('‚úÖ colorlog imported successfully')"
        echo "‚úÖ All required packages are properly installed and importable"
    
    - name: Create required directories
      run: |
        mkdir -p config/auth
        mkdir -p data
    
    - name: Fetch data and update standings
      env:
        YAHOO_CONSUMER_KEY: ${{ secrets.YAHOO_CONSUMER_KEY }}
        YAHOO_CONSUMER_SECRET: ${{ secrets.YAHOO_CONSUMER_SECRET }}
        YAHOO_ACCESS_TOKEN: ${{ secrets.YAHOO_ACCESS_TOKEN }}
        YAHOO_REFRESH_TOKEN: ${{ secrets.YAHOO_REFRESH_TOKEN }}
        YAHOO_GUID: ${{ secrets.YAHOO_GUID }}
        YAHOO_TOKEN_TIME: ${{ secrets.YAHOO_TOKEN_TIME }}
        YAHOO_TOKEN_TYPE: ${{ secrets.YAHOO_TOKEN_TYPE }}
        LEAGUE_ID: ${{ secrets.LEAGUE_ID }}
        GAME_KEY: nfl
        CURRENT_SEASON: 2024
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/scripts
        CI: true
      run: |
        # Verify we're in the right directory and show Python path
        echo "Current directory: $(pwd)"
        echo "Python path: $PYTHONPATH"
        echo "Files in scripts/:"
        ls -la scripts/
        
        # Test Python imports before running
        echo "Testing Python imports..."
        cd scripts
        python -c "import sys; print('Python sys.path:', sys.path)"
        python -c "import yfpy; print('‚úÖ yfpy imported successfully')"
        python -c "from yfpy import YahooFantasySportsQuery; print('‚úÖ YahooFantasySportsQuery imported successfully')"
        python -c "import yahoo_client; print('‚úÖ yahoo_client imported successfully')"
        cd ..
        
        # Debug OAuth tokens (safely, without exposing full values)
        echo "=== OAuth Token Debug Info ==="
        echo "YAHOO_ACCESS_TOKEN length: ${#YAHOO_ACCESS_TOKEN}"
        echo "YAHOO_REFRESH_TOKEN length: ${#YAHOO_REFRESH_TOKEN}"
        echo "YAHOO_ACCESS_TOKEN first 10 chars: ${YAHOO_ACCESS_TOKEN:0:10}..."
        echo "YAHOO_REFRESH_TOKEN first 10 chars: ${YAHOO_REFRESH_TOKEN:0:10}..."
        if [ -n "$YAHOO_GUID" ]; then
          echo "YAHOO_GUID length: ${#YAHOO_GUID}"
          echo "YAHOO_GUID first 10 chars: ${YAHOO_GUID:0:10}..."
        else
          echo "YAHOO_GUID: not set"
        fi
        if [ -n "$YAHOO_TOKEN_TIME" ]; then
          echo "YAHOO_TOKEN_TIME: $YAHOO_TOKEN_TIME"
        else
          echo "YAHOO_TOKEN_TIME: not set"
        fi
        if [ -n "$YAHOO_TOKEN_TYPE" ]; then
          echo "YAHOO_TOKEN_TYPE: $YAHOO_TOKEN_TYPE"
        else
          echo "YAHOO_TOKEN_TYPE: not set"
        fi
        
        # Debug: Show data directory before running script
        echo "üîç Debug - Data directory before script execution:"
        ls -la data/ 2>/dev/null || echo "No data directory"
        
        # Debug: Show git status before script
        echo "üîç Debug - Git status before script execution:"
        git status --porcelain data/ || echo "No git status output"
        
        # Run the script with proper path and output directory
        echo "üöÄ Running fetch_data.py script..."
        if [ "${{ github.event.inputs.all_weeks }}" = "true" ]; then
          echo "üìÖ Mode: Processing all weeks"
          python scripts/fetch_data.py --all-weeks --output-dir data
        elif [ -n "${{ github.event.inputs.week }}" ]; then
          echo "üìÖ Mode: Processing week ${{ github.event.inputs.week }}"
          python scripts/fetch_data.py --week ${{ github.event.inputs.week }} --output-dir data
        else
          echo "üìÖ Mode: Processing current/most recent valid week"
          python scripts/fetch_data.py --output-dir data
        fi
        
        # Debug: Show data directory after running script
        echo "üîç Debug - Data directory after script execution:"
        ls -la data/ 2>/dev/null || echo "No data directory"
        
        # Debug: Show git status after script  
        echo "üîç Debug - Git status after script execution:"
        git status --porcelain data/ || echo "No git status output"
        
        # Show any recent changes to data files
        echo "üîç Debug - Recent modifications to data files:"
        find data/ -name "*.json" -mmin -5 2>/dev/null | while read file; do
          echo "  Recently modified: $file ($(stat -c %y "$file" 2>/dev/null || stat -f %Sm "$file" 2>/dev/null || echo "unknown time"))"
        done
        
        # Debug: Show git diff for data files
        echo "üîç Debug - Git diff for data files:"
        git diff data/ || echo "No git diff output"
    
    - name: Check for changes
      id: git-check
      run: |
        # Check if data directory has any files
        if [ -d "data" ] && [ "$(ls -A data 2>/dev/null)" ]; then
          echo "üìÅ Data directory contains files, checking for changes..."
          
          # Debug: Show git status before processing
          echo "Debug - Git status before processing:"
          git status --porcelain data/ || echo "No git status output"
          
          # Check for untracked files and modifications
          git add data/
          
          # Debug: Show what was staged
          echo "Debug - Staged changes:"
          git diff --cached --name-status data/ || echo "No staged changes"
          
          echo "Debug - Untracked files in data/:"
          git ls-files --others --exclude-standard data/ || echo "No untracked files"
          
          # Check both staged changes AND untracked files (improved logic)
          STAGED_QUIET=$(git diff --cached --quiet data/ && echo "true" || echo "false")
          UNTRACKED_FILES=$(git ls-files --others --exclude-standard data/)
          
          echo "Debug - Staged quiet check: $STAGED_QUIET"
          echo "Debug - Untracked files result: '$UNTRACKED_FILES'"
          
          if [ "$STAGED_QUIET" = "true" ] && [ -z "$UNTRACKED_FILES" ]; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "üìä Data directory exists but no changes detected (using improved detection logic v2)"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ New or modified data files detected (using improved detection logic v2)"
          fi
        else
          echo "üìÇ Data directory is empty (likely no games/data available yet)"
          echo "changes=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.git-check.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/
        git commit -m "üèà Update fantasy football standings - $(date '+%Y-%m-%d %H:%M')"
        git push
    
    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./website

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
    
    - name: Create summary
      if: always()
      run: |
        echo "## Fantasy Football Standings Update" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.git-check.outputs.changes }}" = "true" ]; then
          echo "‚úÖ **Standings updated successfully**" >> $GITHUB_STEP_SUMMARY
          echo "- New data fetched from Yahoo Fantasy API" >> $GITHUB_STEP_SUMMARY
          echo "- Standings recalculated with Victory Points system" >> $GITHUB_STEP_SUMMARY
          echo "- Website deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ÑπÔ∏è **No changes detected**" >> $GITHUB_STEP_SUMMARY
          echo "- Yahoo Fantasy API connection successful ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- No new data available (likely no games played yet)" >> $GITHUB_STEP_SUMMARY
          echo "- This is normal before the season starts or during bye weeks" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next scheduled update:** Tuesday at 8 AM EST" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** Ready for fantasy football season! üèà" >> $GITHUB_STEP_SUMMARY
